/* Verilog netlist generated by SCUBA Diamond (64-bit) 3.10.3.144 */
/* Module Version: 5.8 */
/* C:\lscc\diamond\3.10_x64\ispfpga\bin\nt64\scuba.exe -w -n ddr_mem -lang verilog -synth lse -bus_exp 7 -bb -arch sa5p00 -type iol -mode DDR3L -io_type SSTL135_I -freq_in 400 -gear 4 -dqs 1 8 -dqs 2 8 -dqs_diff -dqs_deli -257 -dqs_delo -257 -num_clk 1 -num_ce 1 -addr_width 14 -bank_width 3 -num_odt 1 -num_cs 1 -dqs_perside 4 -fdc Z:/Users/mnolan/programming/verilog/ddr3_controller/diamond/ddr/ddr_mem/ddr_mem.fdc  */
/* Fri Jan 04 15:18:26 2019 */


// ============================================================================
//                           COPYRIGHT NOTICE
// Copyright 2013 Lattice Semiconductor Corporation
// ALL RIGHTS RESERVED
// This confidential and proprietary software may be used only as authorized by
// a licensing agreement from Lattice Semiconductor Corporation.
// The entire notice above must be reproduced on all authorized copies and
// copies may only be made to the extent permitted by a licensing agreement 
// from Lattice Semiconductor Corporation.
//
// Lattice Semiconductor Corporation      TEL  : 1-800-Lattice (USA and Canada)
// 5555 NE Moore Court                           408-826-6000 (other locations)
// Hillsboro, OR 97124                    web  : http://www.latticesemi.com/
// U.S.A                                  email: techsupport@latticesemi.com
// =============================================================================
// Module     : mem_sync.v
// Description: 
//   - Performs start up sync needed to avoid issues on DDR memory bus
//   - Performs code update in operation without interrupting interface operation
// =============================================================================
`timescale 1ns/1ps
`define CNT_WIDTH 2

module ddr_memmem_sync (
  //inputs
  start_clk,
  rst,
  dll_lock,
  pll_lock,
  update,
  //outputs
  pause,
  stop,
  freeze,
  uddcntln,
  dll_rst,
  ddr_rst,
  ready
);

// -------------------------------------------------   
//  PORT DECLARATION
// -------------------------------------------------
input       start_clk;  // oscillator clk or other constant running low speed 
                        // clk. Note that this clk should not be coming from 
                        // clk sources that this module will stop or reset 
                        // (e.g. ECLKSYNC, CLKDIV, etc.)
input       rst;        // Active high reset signal
input       dll_lock;   // Lock signal from DDRDLL
input       pll_lock;   // Lock signal from PLL
input       update;     // Signal to trigger code update

output wire pause;      // Pause signal for DQSBUF
output wire stop;       // Stop signal for ECLKSYNC
output wire freeze;     // Freeze signal for DDRDLL
output wire uddcntln;   // Update code signal for DDRDLL
output reg  dll_rst;    // Reset signal for DDRDLL
output wire ddr_rst;    // Reset signal for CLKDIV and DDR components
output wire ready;      // Ready signal to indicate sync done

// -------------------------------------------------   
//  SIGNAL DECLARATION
// ------------------------------------------------- 
reg [`CNT_WIDTH:0] count;       // Counter for both 4T and 8T delay cycles
reg [5:0]          cs_memsync /*synthesis syn_preserve = 1*/ ;
                                // FSM Current state
reg [5:0]          ns_memsync;  // FSM Next state
reg [1:0]          flag;        // Signal to determine next FSM state
reg [1:0]          flag_d;      // Registered flag_d signal
reg                lock_d1;     // Sync register for pll_lock & dll_lock input
reg                lock_d2;     // Sync register for pll_lock & dll_lock input
reg                ddr_rst_d1;  // DDR reset when rst input is detected
                   
wire               counter_4t;  // Signal for counter to count up to 4T only
wire               ddr_rst_d;   // DDR reset output of FSM

// -------------------------------------------------   
//  PARAMETERS
// ------------------------------------------------- 
// FSM States
// Each bit is equivalent to an fsm output in the following order
//     FORMAT:       freeze stop ddr_rst pause uddcntln ready
localparam INIT            = 6'b000010;
localparam FREEZE          = 6'b100010;
localparam STOP            = 6'b110010;
localparam DDR             = 6'b111010;
localparam PAUSE           = 6'b000110;
localparam UDDCNTLN        = 6'b000100;
localparam READY           = 6'b000011;
localparam UPDATE_PAUSE    = 6'b000111;
localparam UPDATE_UDDCNTLN = 6'b000101;

// Maximum Count
localparam COUNT_8T        = 7; // 8T timing
localparam COUNT_4T        = 3; // 4T timing
localparam COUNT_LOCK      = 5; // 8T timing for synchronized lock

// -------------------------------------------------   
//  CONTINUOUS ASSIGNMENTS
// ------------------------------------------------- 
assign ready     = cs_memsync[0];
assign uddcntln  = cs_memsync[1];
assign pause     = cs_memsync[2];
assign ddr_rst_d = cs_memsync[3];
assign stop      = cs_memsync[4];
assign freeze    = cs_memsync[5];
assign ddr_rst   = ddr_rst_d || ddr_rst_d1;

// Assert counter_4t to count only up to CNT_4T parameter
assign counter_4t = cs_memsync[5] || cs_memsync[2];

// -------------------------------------------------   
//  SYNCHRONIZER FOR DLL_LOCK
// ------------------------------------------------- 
always @ (posedge start_clk or posedge rst) begin
  if (rst) begin
    lock_d1 <= 1'b0;
    lock_d2 <= 1'b0;
  end
  else begin
    lock_d1 <= dll_lock & pll_lock;
    lock_d2 <= lock_d1;
  end
end

// -------------------------------------------------   
//  CURRENT STATE & OUTPUT REGISTERS
// -------------------------------------------------    
always @ (posedge start_clk or posedge rst) begin	
  if (rst) begin
    cs_memsync <= INIT; 
    dll_rst    <= 1'b1;
    ddr_rst_d1 <= 1'b1;
    flag       <= 1'b0;
  end
  else begin
    cs_memsync <= ns_memsync;
    dll_rst    <= 1'b0;
    ddr_rst_d1 <= 1'b0;
    flag       <= flag_d;
  end
end

// -------------------------------------------------     
//  RESET SEQUENCE ONE-HOT FSM
// -------------------------------------------------   
always @ (*) begin

  case(cs_memsync) 		/* synthesis full_case parallel_case */

    // INITIAL STATE
    INIT: begin     
      // Wait for DDRDLL lock
      if (lock_d2 && (flag==0) && (count == COUNT_LOCK)) begin
          ns_memsync = FREEZE;
          flag_d     = flag;
      end
      else if ( (flag!=0 ) && (count==COUNT_8T) ) begin
        if (flag[1]) begin
          ns_memsync = READY;
          flag_d     = flag;
          end
        else if (flag[0]) begin
          ns_memsync = PAUSE;
          flag_d     = 2'd0;          
        end
      end
      else begin
        ns_memsync = cs_memsync;
        flag_d     = flag;
      end
    end

    // ASSERT FREEZE STATE
    FREEZE: begin    
      if (count == COUNT_4T) begin
        if (flag[0]) begin
          ns_memsync = INIT;
          flag_d     = flag;
          end
        else begin
          ns_memsync = STOP;
          flag_d     = flag;
          end
      end
      else begin
        ns_memsync = cs_memsync;
        flag_d     = flag;
      end      
    end

    // ASSERT STOP STATE
    STOP: begin
      if (count == COUNT_4T) begin
        if (flag[0]) begin
          ns_memsync = FREEZE;
          flag_d     = flag;
        end
        else begin
          ns_memsync = DDR;
          flag_d     = flag;
        end
      end
      else begin
        ns_memsync = cs_memsync;
        flag_d     = flag;
      end 
    end

    // ASSERT DDR_RST STATE
    DDR: begin
      flag_d = 2'd1;
      if (count == COUNT_4T) begin
        ns_memsync = STOP;
      end
      else begin
        ns_memsync = cs_memsync;
      end 
    end

    // ASSERT PAUSE STATE
    PAUSE: begin
      if (count == COUNT_4T) begin
        if (flag[0]) begin
          ns_memsync = INIT;
          flag_d     = 2'd2;
        end
        else begin
          ns_memsync = UDDCNTLN;
          flag_d     = flag;
        end
      end
      else begin
        ns_memsync = cs_memsync;
        flag_d     = flag;
      end 
    end

    // ASSERT UDDCNTLN STATE
    UDDCNTLN: begin
      flag_d = 2'd1;
      if (count == COUNT_4T) begin
        ns_memsync = PAUSE;
      end
      else begin
        ns_memsync = cs_memsync;
      end 
    end
    
    // ASSERT READY STATE
    READY: begin
      flag_d = 2'd0;
      // Check if DDRDLL is still locked
      if (!lock_d2) begin
        ns_memsync = INIT;
      end
      // Check if there is an update request
      else if (update) begin
        ns_memsync = UPDATE_PAUSE;
      end
      else begin
        ns_memsync = cs_memsync;
      end
    end
    
    // ASSERT PAUSE STATE during code update
    UPDATE_PAUSE: begin
      if (count == COUNT_4T) begin
        if (flag[0]) begin
          ns_memsync = READY;
          flag_d     = flag;
        end
        else begin
          ns_memsync = UPDATE_UDDCNTLN;
          flag_d     = flag;
        end
      end
      else begin
        ns_memsync = cs_memsync;
        flag_d     = flag;
      end 
    end

    // ASSERT UDDCNTLN STATE during code update
    UPDATE_UDDCNTLN: begin
      flag_d = 2'd1;
      if (count == COUNT_4T) begin
        ns_memsync = UPDATE_PAUSE;
      end
      else begin
        ns_memsync = cs_memsync;
      end 
    end
    
    // Default State
    default: begin
      ns_memsync = cs_memsync;
      flag_d     = flag;
    end
    
  endcase
end


// ------------------------------------------------- 
//  COUNTER
// ------------------------------------------------- 

always @(posedge start_clk or posedge rst) begin
  if (rst) begin
    count <= 'h0;
  end
  else if ((counter_4t && (count==COUNT_4T)) || 
          ((cs_memsync==INIT) && !lock_d2) || 
          ((flag==0) && (count==COUNT_LOCK)) ||
          ((cs_memsync==READY)&&ready))
  begin
    count <= 'h0;
  end
  else begin
    count <= count + 1;
  end
end

endmodule //ddr_memmem_sync


`timescale 1 ns / 1 ps
module ddr_mem (burstdet_0, burstdet_1, casn, casn_din0, casn_din1, 
    clkop, datatri_0, datatri_1, datavalid_0, datavalid_1, dcntl, dqs_0, 
    dqs_1, dqso_0, dqso_1, dqstri_0, dqstri_1, dyndelay_0, dyndelay_1, 
    pause_data, pll_lock, rasn, rasn_din0, rasn_din1, read_0, read_1, 
    readclksel_0, readclksel_1, ready, sclk, sync_clk, sync_reset, 
    update, wen, wen_din0, wen_din1, addr, addr_din0, addr_din1, ba, 
    ba_din0, ba_din1, cke, cke_din0, cke_din1, csn, csn_din0, csn_din1, 
    datain_0o, datain_1o, dataout_0i, dataout_1i, ddrclk, dq_0, dq_1, 
    odt, odt_din0, odt_din1, qwl_0, qwl_1)/* synthesis NGD_DRC_MASK=1 */;
    input wire casn_din0;
    input wire casn_din1;
    input wire clkop;
    input wire [1:0] datatri_0;
    input wire [1:0] datatri_1;
    input wire [1:0] dqso_0;
    input wire [1:0] dqso_1;
    input wire [1:0] dqstri_0;
    input wire [1:0] dqstri_1;
    input wire [7:0] dyndelay_0;
    input wire [7:0] dyndelay_1;
    input wire pause_data;
    input wire pll_lock;
    input wire rasn_din0;
    input wire rasn_din1;
    input wire [1:0] read_0;
    input wire [1:0] read_1;
    input wire [2:0] readclksel_0;
    input wire [2:0] readclksel_1;
    input wire sync_clk;
    input wire sync_reset;
    input wire update;
    input wire wen_din0;
    input wire wen_din1;
    input wire [13:0] addr_din0;
    input wire [13:0] addr_din1;
    input wire [2:0] ba_din0;
    input wire [2:0] ba_din1;
    input wire [0:0] cke_din0;
    input wire [0:0] cke_din1;
    input wire [0:0] csn_din0;
    input wire [0:0] csn_din1;
    input wire [31:0] dataout_0i;
    input wire [31:0] dataout_1i;
    input wire [0:0] odt_din0;
    input wire [0:0] odt_din1;
    output wire burstdet_0;
    output wire burstdet_1;
    output wire casn;
    output wire datavalid_0;
    output wire datavalid_1;
    output wire [7:0] dcntl;
    output wire rasn;
    output wire ready;
    output wire sclk;
    output wire wen;
    output wire [13:0] addr;
    output wire [2:0] ba;
    output wire [0:0] cke;
    output wire [0:0] csn;
    output wire [31:0] datain_0o;
    output wire [31:0] datain_1o;
    output wire [0:0] ddrclk;
    output wire [0:0] odt;
    output wire [7:0] qwl_0;
    output wire [7:0] qwl_1;
    inout wire dqs_0;
    inout wire dqs_1;
    inout wire [7:0] dq_0;
    inout wire [7:0] dq_1;

    wire pause_sync;
    wire dll_lock;
    wire buf_odto0;
    wire buf_ckeo0;
    wire buf_csnod0;
    wire buf_csno0;
    wire buf_weno;
    wire buf_casno;
    wire buf_rasno;
    wire buf_bao2;
    wire buf_bao1;
    wire buf_bao0;
    wire buf_addro13;
    wire buf_addro12;
    wire buf_addro11;
    wire buf_addro10;
    wire buf_addro9;
    wire buf_addro8;
    wire buf_addro7;
    wire buf_addro6;
    wire buf_addro5;
    wire buf_addro4;
    wire buf_addro3;
    wire buf_addro2;
    wire buf_addro1;
    wire buf_addro0;
    wire buf_ddrclkod0;
    wire buf_ddrclko0;
    wire scuba_vhi;
    wire wrcflag_1;
    wire rdcflag_1;
    wire dqsw1;
    wire dqsw270_1;
    wire wrdirection_1;
    wire wrmove_1;
    wire wrloadn_1;
    wire rddirection_1;
    wire rdmove_1;
    wire rdloadn_1;
    wire wrcflag_0;
    wire rdcflag_0;
    wire dqsw0;
    wire dqsw270_0;
    wire wrdirection_0;
    wire wrmove_0;
    wire wrloadn_0;
    wire rddirection_0;
    wire rdmove_0;
    wire rdloadn_0;
    wire pause;
    wire wrpntr0_1;
    wire wrpntr1_1;
    wire wrpntr2_1;
    wire rdpntr0_1;
    wire rdpntr1_1;
    wire rdpntr2_1;
    wire dqsr90_1;
    wire wrpntr0_0;
    wire wrpntr1_0;
    wire wrpntr2_0;
    wire rdpntr0_0;
    wire rdpntr1_0;
    wire rdpntr2_0;
    wire dqsr90_0;
    wire datain_t15;
    wire datain_t14;
    wire datain_t13;
    wire datain_t12;
    wire datain_t11;
    wire datain_t10;
    wire datain_t9;
    wire datain_t8;
    wire datain_t7;
    wire datain_t6;
    wire datain_t5;
    wire datain_t4;
    wire datain_t3;
    wire datain_t2;
    wire datain_t1;
    wire datain_t0;
    wire lock;
    wire ddrdel;
    wire freeze;
    wire uddcntln;
    wire dll_reset;
    wire scuba_vlo;
    wire reset;
    wire eclko;
    wire stop;
    wire qwl15;
    wire qwl14;
    wire qwl13;
    wire qwl12;
    wire qwl11;
    wire qwl10;
    wire qwl9;
    wire qwl8;
    wire dqso1_1;
    wire dqso0_1;
    wire dqstri1_1;
    wire dqstri0_1;
    wire datatri1_1;
    wire datatri0_1;
    wire read1_1;
    wire read0_1;
    wire dyndelay7_1;
    wire dyndelay6_1;
    wire dyndelay5_1;
    wire dyndelay4_1;
    wire dyndelay3_1;
    wire dyndelay2_1;
    wire dyndelay1_1;
    wire dyndelay0_1;
    wire readclksel2_1;
    wire readclksel1_1;
    wire readclksel0_1;
    wire dd15;
    wire dd14;
    wire dd13;
    wire dd12;
    wire dd11;
    wire dd10;
    wire dd9;
    wire dd8;
    wire dc15;
    wire dc14;
    wire dc13;
    wire dc12;
    wire dc11;
    wire dc10;
    wire dc9;
    wire dc8;
    wire qd15;
    wire qd14;
    wire qd13;
    wire qd12;
    wire qd11;
    wire qd10;
    wire qd9;
    wire qd8;
    wire qc15;
    wire qc14;
    wire qc13;
    wire qc12;
    wire qc11;
    wire qc10;
    wire qc9;
    wire qc8;
    wire db15;
    wire db14;
    wire db13;
    wire db12;
    wire db11;
    wire db10;
    wire db9;
    wire db8;
    wire da15;
    wire da14;
    wire da13;
    wire da12;
    wire da11;
    wire da10;
    wire da9;
    wire da8;
    wire qb15;
    wire qb14;
    wire qb13;
    wire qb12;
    wire qb11;
    wire qb10;
    wire qb9;
    wire qb8;
    wire qa15;
    wire qa14;
    wire qa13;
    wire qa12;
    wire qa11;
    wire qa10;
    wire qa9;
    wire qa8;
    wire dqtri1;
    wire dqo15;
    wire dqo14;
    wire dqo13;
    wire dqo12;
    wire dqo11;
    wire dqo10;
    wire dqo9;
    wire dqo8;
    wire dqin_t15;
    wire dqin_t14;
    wire dqin_t13;
    wire dqin_t12;
    wire dqin_t11;
    wire dqin_t10;
    wire dqin_t9;
    wire dqin_t8;
    wire buf_dq_1i7;
    wire buf_dq_1t7;
    wire buf_dq_1o7;
    wire buf_dq_1i6;
    wire buf_dq_1t6;
    wire buf_dq_1o6;
    wire buf_dq_1i5;
    wire buf_dq_1t5;
    wire buf_dq_1o5;
    wire buf_dq_1i4;
    wire buf_dq_1t4;
    wire buf_dq_1o4;
    wire buf_dq_1i3;
    wire buf_dq_1t3;
    wire buf_dq_1o3;
    wire buf_dq_1i2;
    wire buf_dq_1t2;
    wire buf_dq_1o2;
    wire buf_dq_1i1;
    wire buf_dq_1t1;
    wire buf_dq_1o1;
    wire buf_dq_1i0;
    wire buf_dq_1t0;
    wire buf_dq_1o0;
    wire dqsin1;
    wire dqsout1;
    wire dqstrio1;
    wire buf_dqs_1i;
    wire buf_dqs_1t;
    wire buf_dqs_1o;
    wire qwl7;
    wire qwl6;
    wire qwl5;
    wire qwl4;
    wire qwl3;
    wire qwl2;
    wire qwl1;
    wire qwl0;
    wire dqso1_0;
    wire dqso0_0;
    wire dqstri1_0;
    wire dqstri0_0;
    wire datatri1_0;
    wire datatri0_0;
    wire read1_0;
    wire read0_0;
    wire dyndelay7_0;
    wire dyndelay6_0;
    wire dyndelay5_0;
    wire dyndelay4_0;
    wire dyndelay3_0;
    wire dyndelay2_0;
    wire dyndelay1_0;
    wire dyndelay0_0;
    wire readclksel2_0;
    wire readclksel1_0;
    wire readclksel0_0;
    wire dd7;
    wire dd6;
    wire dd5;
    wire dd4;
    wire dd3;
    wire dd2;
    wire dd1;
    wire dd0;
    wire dc7;
    wire dc6;
    wire dc5;
    wire dc4;
    wire dc3;
    wire dc2;
    wire dc1;
    wire dc0;
    wire qd7;
    wire qd6;
    wire qd5;
    wire qd4;
    wire qd3;
    wire qd2;
    wire qd1;
    wire qd0;
    wire qc7;
    wire qc6;
    wire qc5;
    wire qc4;
    wire qc3;
    wire qc2;
    wire qc1;
    wire qc0;
    wire db7;
    wire db6;
    wire db5;
    wire db4;
    wire db3;
    wire db2;
    wire db1;
    wire db0;
    wire da7;
    wire da6;
    wire da5;
    wire da4;
    wire da3;
    wire da2;
    wire da1;
    wire da0;
    wire qb7;
    wire qb6;
    wire qb5;
    wire qb4;
    wire qb3;
    wire qb2;
    wire qb1;
    wire qb0;
    wire qa7;
    wire qa6;
    wire qa5;
    wire qa4;
    wire qa3;
    wire qa2;
    wire qa1;
    wire qa0;
    wire dqtri0;
    wire dqo7;
    wire dqo6;
    wire dqo5;
    wire dqo4;
    wire dqo3;
    wire dqo2;
    wire dqo1;
    wire dqo0;
    wire dqin_t7;
    wire dqin_t6;
    wire dqin_t5;
    wire dqin_t4;
    wire dqin_t3;
    wire dqin_t2;
    wire dqin_t1;
    wire dqin_t0;
    wire buf_dq_0i7;
    wire buf_dq_0t7;
    wire buf_dq_0o7;
    wire buf_dq_0i6;
    wire buf_dq_0t6;
    wire buf_dq_0o6;
    wire buf_dq_0i5;
    wire buf_dq_0t5;
    wire buf_dq_0o5;
    wire buf_dq_0i4;
    wire buf_dq_0t4;
    wire buf_dq_0o4;
    wire buf_dq_0i3;
    wire buf_dq_0t3;
    wire buf_dq_0o3;
    wire buf_dq_0i2;
    wire buf_dq_0t2;
    wire buf_dq_0o2;
    wire buf_dq_0i1;
    wire buf_dq_0t1;
    wire buf_dq_0o1;
    wire buf_dq_0i0;
    wire buf_dq_0t0;
    wire buf_dq_0o0;
    wire dqsin0;
    wire dqsout0;
    wire dqstrio0;
    wire buf_dqs_0i;
    wire buf_dqs_0t;
    wire buf_dqs_0o;
    wire sclk_t;
    wire lock_chk;

    OR2 OR2_t0 (.A(pause_data), .B(pause_sync), .Z(pause));

    ddr_memmem_sync Inst_mem_sync (.start_clk(sync_clk), .rst(sync_reset), 
        .dll_lock(dll_lock), .pll_lock(lock_chk), .update(update), .pause(pause_sync), 
        .stop(stop), .freeze(freeze), .uddcntln(uddcntln), .dll_rst(dll_reset), 
        .ddr_rst(reset), .ready(ready));

    OB Inst31_OB0 (.I(buf_odto0), .O(odt[0]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    ODDRX1F Inst30_ODDRX1F0 (.SCLK(sclk_t), .RST(reset), .D0(odt_din0[0]), 
        .D1(odt_din1[0]), .Q(buf_odto0));

    OB Inst29_OB0 (.I(buf_ckeo0), .O(cke[0]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    ODDRX1F Inst28_ODDRX1F0 (.SCLK(sclk_t), .RST(reset), .D0(cke_din0[0]), 
        .D1(cke_din1[0]), .Q(buf_ckeo0));

    OB Inst27_OB0 (.I(buf_csnod0), .O(csn[0]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    defparam Inst26_DELAYG0.DEL_VALUE = 0 ;
    defparam Inst26_DELAYG0.DEL_MODE = "DQS_CMD_CLK" ;
    DELAYG Inst26_DELAYG0 (.A(buf_csno0), .Z(buf_csnod0));

    OSHX2A Inst25_OSHX2A0 (.D1(csn_din1[0]), .D0(csn_din0[0]), .SCLK(sclk_t), 
        .ECLK(eclko), .RST(reset), .Q(buf_csno0));

    OB Inst24_OB (.I(buf_weno), .O(wen))
             /* synthesis IO_TYPE="SSTL135_I" */;

    ODDRX1F Inst23_ODDRX1F (.SCLK(sclk_t), .RST(reset), .D0(wen_din0), .D1(wen_din1), 
        .Q(buf_weno));

    OB Inst22_OB (.I(buf_casno), .O(casn))
             /* synthesis IO_TYPE="SSTL135_I" */;

    ODDRX1F Inst21_ODDRX1F (.SCLK(sclk_t), .RST(reset), .D0(casn_din0), 
        .D1(casn_din1), .Q(buf_casno));

    OB Inst20_OB (.I(buf_rasno), .O(rasn))
             /* synthesis IO_TYPE="SSTL135_I" */;

    ODDRX1F Inst19_ODDRX1F (.SCLK(sclk_t), .RST(reset), .D0(rasn_din0), 
        .D1(rasn_din1), .Q(buf_rasno));

    OB Inst18_OB2 (.I(buf_bao2), .O(ba[2]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst18_OB1 (.I(buf_bao1), .O(ba[1]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst18_OB0 (.I(buf_bao0), .O(ba[0]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    ODDRX1F Inst17_ODDRX1F2 (.SCLK(sclk_t), .RST(reset), .D0(ba_din0[2]), 
        .D1(ba_din1[2]), .Q(buf_bao2));

    ODDRX1F Inst17_ODDRX1F1 (.SCLK(sclk_t), .RST(reset), .D0(ba_din0[1]), 
        .D1(ba_din1[1]), .Q(buf_bao1));

    ODDRX1F Inst17_ODDRX1F0 (.SCLK(sclk_t), .RST(reset), .D0(ba_din0[0]), 
        .D1(ba_din1[0]), .Q(buf_bao0));

    OB Inst16_OB13 (.I(buf_addro13), .O(addr[13]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB12 (.I(buf_addro12), .O(addr[12]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB11 (.I(buf_addro11), .O(addr[11]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB10 (.I(buf_addro10), .O(addr[10]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB9 (.I(buf_addro9), .O(addr[9]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB8 (.I(buf_addro8), .O(addr[8]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB7 (.I(buf_addro7), .O(addr[7]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB6 (.I(buf_addro6), .O(addr[6]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB5 (.I(buf_addro5), .O(addr[5]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB4 (.I(buf_addro4), .O(addr[4]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB3 (.I(buf_addro3), .O(addr[3]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB2 (.I(buf_addro2), .O(addr[2]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB1 (.I(buf_addro1), .O(addr[1]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    OB Inst16_OB0 (.I(buf_addro0), .O(addr[0]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    ODDRX1F Inst15_ODDRX1F13 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[13]), 
        .D1(addr_din1[13]), .Q(buf_addro13));

    ODDRX1F Inst15_ODDRX1F12 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[12]), 
        .D1(addr_din1[12]), .Q(buf_addro12));

    ODDRX1F Inst15_ODDRX1F11 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[11]), 
        .D1(addr_din1[11]), .Q(buf_addro11));

    ODDRX1F Inst15_ODDRX1F10 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[10]), 
        .D1(addr_din1[10]), .Q(buf_addro10));

    ODDRX1F Inst15_ODDRX1F9 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[9]), 
        .D1(addr_din1[9]), .Q(buf_addro9));

    ODDRX1F Inst15_ODDRX1F8 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[8]), 
        .D1(addr_din1[8]), .Q(buf_addro8));

    ODDRX1F Inst15_ODDRX1F7 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[7]), 
        .D1(addr_din1[7]), .Q(buf_addro7));

    ODDRX1F Inst15_ODDRX1F6 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[6]), 
        .D1(addr_din1[6]), .Q(buf_addro6));

    ODDRX1F Inst15_ODDRX1F5 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[5]), 
        .D1(addr_din1[5]), .Q(buf_addro5));

    ODDRX1F Inst15_ODDRX1F4 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[4]), 
        .D1(addr_din1[4]), .Q(buf_addro4));

    ODDRX1F Inst15_ODDRX1F3 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[3]), 
        .D1(addr_din1[3]), .Q(buf_addro3));

    ODDRX1F Inst15_ODDRX1F2 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[2]), 
        .D1(addr_din1[2]), .Q(buf_addro2));

    ODDRX1F Inst15_ODDRX1F1 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[1]), 
        .D1(addr_din1[1]), .Q(buf_addro1));

    ODDRX1F Inst15_ODDRX1F0 (.SCLK(sclk_t), .RST(reset), .D0(addr_din0[0]), 
        .D1(addr_din1[0]), .Q(buf_addro0));

    OB Inst14_OB0 (.I(buf_ddrclkod0), .O(ddrclk[0]))
             /* synthesis IO_TYPE="SSTL135D_I" */;

    defparam Inst13_DELAYG0.DEL_VALUE = 0 ;
    defparam Inst13_DELAYG0.DEL_MODE = "DQS_CMD_CLK" ;
    DELAYG Inst13_DELAYG0 (.A(buf_ddrclko0), .Z(buf_ddrclkod0));

    VHI scuba_vhi_inst (.Z(scuba_vhi));

    ODDRX2F Inst12_ODDRX2F0 (.SCLK(sclk_t), .ECLK(eclko), .RST(reset), .D3(scuba_vhi), 
        .D2(scuba_vlo), .D1(scuba_vhi), .D0(scuba_vlo), .Q(buf_ddrclko0));

    TSHX2DQSA Inst11_TSHX2DQSA1 (.T1(dqstri1_1), .T0(dqstri0_1), .SCLK(sclk_t), 
        .ECLK(eclko), .DQSW(dqsw1), .RST(reset), .Q(dqstrio1));

    TSHX2DQSA Inst11_TSHX2DQSA0 (.T1(dqstri1_0), .T0(dqstri0_0), .SCLK(sclk_t), 
        .ECLK(eclko), .DQSW(dqsw0), .RST(reset), .Q(dqstrio0));

    ODDRX2DQSB Inst10_ODDRX2DQSB1 (.D3(dqso1_1), .D2(scuba_vlo), .D1(dqso0_1), 
        .D0(scuba_vlo), .SCLK(sclk_t), .ECLK(eclko), .DQSW(dqsw1), .RST(reset), 
        .Q(dqsout1));

    ODDRX2DQSB Inst10_ODDRX2DQSB0 (.D3(dqso1_0), .D2(scuba_vlo), .D1(dqso0_0), 
        .D0(scuba_vlo), .SCLK(sclk_t), .ECLK(eclko), .DQSW(dqsw0), .RST(reset), 
        .Q(dqsout0));

    TSHX2DQA Inst9_TSHX2DQA1 (.T1(datatri1_1), .T0(datatri0_1), .SCLK(sclk_t), 
        .ECLK(eclko), .DQSW270(dqsw270_1), .RST(reset), .Q(dqtri1));

    TSHX2DQA Inst9_TSHX2DQA0 (.T1(datatri1_0), .T0(datatri0_0), .SCLK(sclk_t), 
        .ECLK(eclko), .DQSW270(dqsw270_0), .RST(reset), .Q(dqtri0));

    ODDRX2DQA Inst_ODDRX2DQA_1_7 (.D3(dd15), .D2(dc15), .D1(db15), .D0(da15), 
        .DQSW270(dqsw270_1), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo15));

    ODDRX2DQA Inst_ODDRX2DQA_1_6 (.D3(dd14), .D2(dc14), .D1(db14), .D0(da14), 
        .DQSW270(dqsw270_1), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo14));

    ODDRX2DQA Inst_ODDRX2DQA_1_5 (.D3(dd13), .D2(dc13), .D1(db13), .D0(da13), 
        .DQSW270(dqsw270_1), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo13));

    ODDRX2DQA Inst_ODDRX2DQA_1_4 (.D3(dd12), .D2(dc12), .D1(db12), .D0(da12), 
        .DQSW270(dqsw270_1), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo12));

    ODDRX2DQA Inst_ODDRX2DQA_1_3 (.D3(dd11), .D2(dc11), .D1(db11), .D0(da11), 
        .DQSW270(dqsw270_1), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo11));

    ODDRX2DQA Inst_ODDRX2DQA_1_2 (.D3(dd10), .D2(dc10), .D1(db10), .D0(da10), 
        .DQSW270(dqsw270_1), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo10));

    ODDRX2DQA Inst_ODDRX2DQA_1_1 (.D3(dd9), .D2(dc9), .D1(db9), .D0(da9), 
        .DQSW270(dqsw270_1), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo9));

    ODDRX2DQA Inst_ODDRX2DQA_1_0 (.D3(dd8), .D2(dc8), .D1(db8), .D0(da8), 
        .DQSW270(dqsw270_1), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo8));

    ODDRX2DQA Inst_ODDRX2DQA_0_7 (.D3(dd7), .D2(dc7), .D1(db7), .D0(da7), 
        .DQSW270(dqsw270_0), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo7));

    ODDRX2DQA Inst_ODDRX2DQA_0_6 (.D3(dd6), .D2(dc6), .D1(db6), .D0(da6), 
        .DQSW270(dqsw270_0), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo6));

    ODDRX2DQA Inst_ODDRX2DQA_0_5 (.D3(dd5), .D2(dc5), .D1(db5), .D0(da5), 
        .DQSW270(dqsw270_0), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo5));

    ODDRX2DQA Inst_ODDRX2DQA_0_4 (.D3(dd4), .D2(dc4), .D1(db4), .D0(da4), 
        .DQSW270(dqsw270_0), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo4));

    ODDRX2DQA Inst_ODDRX2DQA_0_3 (.D3(dd3), .D2(dc3), .D1(db3), .D0(da3), 
        .DQSW270(dqsw270_0), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo3));

    ODDRX2DQA Inst_ODDRX2DQA_0_2 (.D3(dd2), .D2(dc2), .D1(db2), .D0(da2), 
        .DQSW270(dqsw270_0), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo2));

    ODDRX2DQA Inst_ODDRX2DQA_0_1 (.D3(dd1), .D2(dc1), .D1(db1), .D0(da1), 
        .DQSW270(dqsw270_0), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo1));

    ODDRX2DQA Inst_ODDRX2DQA_0_0 (.D3(dd0), .D2(dc0), .D1(db0), .D0(da0), 
        .DQSW270(dqsw270_0), .SCLK(sclk_t), .ECLK(eclko), .RST(reset), .Q(dqo0));

    defparam Inst8_DQSBUFM1.DQS_LO_DEL_VAL = 0 ;
    defparam Inst8_DQSBUFM1.DQS_LO_DEL_ADJ = "FACTORYONLY" ;
    defparam Inst8_DQSBUFM1.DQS_LI_DEL_VAL = 0 ;
    defparam Inst8_DQSBUFM1.DQS_LI_DEL_ADJ = "FACTORYONLY" ;
    DQSBUFM Inst8_DQSBUFM1 (.DQSI(dqsin1), .READ1(read1_1), .READ0(read0_1), 
        .READCLKSEL2(readclksel2_1), .READCLKSEL1(readclksel1_1), .READCLKSEL0(readclksel0_1), 
        .DDRDEL(ddrdel), .ECLK(eclko), .SCLK(sclk_t), .RST(reset), .PAUSE(pause), 
        .DYNDELAY7(dyndelay7_1), .DYNDELAY6(dyndelay6_1), .DYNDELAY5(dyndelay5_1), 
        .DYNDELAY4(dyndelay4_1), .DYNDELAY3(dyndelay3_1), .DYNDELAY2(dyndelay2_1), 
        .DYNDELAY1(dyndelay1_1), .DYNDELAY0(dyndelay0_1), .RDLOADN(rdloadn_1), 
        .RDMOVE(rdmove_1), .RDDIRECTION(rddirection_1), .WRLOADN(wrloadn_1), 
        .WRMOVE(wrmove_1), .WRDIRECTION(wrdirection_1), .DQSR90(dqsr90_1), 
        .DQSW270(dqsw270_1), .DQSW(dqsw1), .RDPNTR2(rdpntr2_1), .RDPNTR1(rdpntr1_1), 
        .RDPNTR0(rdpntr0_1), .WRPNTR2(wrpntr2_1), .WRPNTR1(wrpntr1_1), .WRPNTR0(wrpntr0_1), 
        .DATAVALID(datavalid_1), .BURSTDET(burstdet_1), .RDCFLAG(rdcflag_1), 
        .WRCFLAG(wrcflag_1));

    defparam Inst8_DQSBUFM0.DQS_LO_DEL_VAL = 0 ;
    defparam Inst8_DQSBUFM0.DQS_LO_DEL_ADJ = "FACTORYONLY" ;
    defparam Inst8_DQSBUFM0.DQS_LI_DEL_VAL = 0 ;
    defparam Inst8_DQSBUFM0.DQS_LI_DEL_ADJ = "FACTORYONLY" ;
    DQSBUFM Inst8_DQSBUFM0 (.DQSI(dqsin0), .READ1(read1_0), .READ0(read0_0), 
        .READCLKSEL2(readclksel2_0), .READCLKSEL1(readclksel1_0), .READCLKSEL0(readclksel0_0), 
        .DDRDEL(ddrdel), .ECLK(eclko), .SCLK(sclk_t), .RST(reset), .PAUSE(pause), 
        .DYNDELAY7(dyndelay7_0), .DYNDELAY6(dyndelay6_0), .DYNDELAY5(dyndelay5_0), 
        .DYNDELAY4(dyndelay4_0), .DYNDELAY3(dyndelay3_0), .DYNDELAY2(dyndelay2_0), 
        .DYNDELAY1(dyndelay1_0), .DYNDELAY0(dyndelay0_0), .RDLOADN(rdloadn_0), 
        .RDMOVE(rdmove_0), .RDDIRECTION(rddirection_0), .WRLOADN(wrloadn_0), 
        .WRMOVE(wrmove_0), .WRDIRECTION(wrdirection_0), .DQSR90(dqsr90_0), 
        .DQSW270(dqsw270_0), .DQSW(dqsw0), .RDPNTR2(rdpntr2_0), .RDPNTR1(rdpntr1_0), 
        .RDPNTR0(rdpntr0_0), .WRPNTR2(wrpntr2_0), .WRPNTR1(wrpntr1_0), .WRPNTR0(wrpntr0_0), 
        .DATAVALID(datavalid_0), .BURSTDET(burstdet_0), .RDCFLAG(rdcflag_0), 
        .WRCFLAG(wrcflag_0));

    IDDRX2DQA Inst_IDDRX2DQA_1_7 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_1), 
        .D(datain_t15), .RST(reset), .RDPNTR2(rdpntr2_1), .RDPNTR1(rdpntr1_1), 
        .RDPNTR0(rdpntr0_1), .WRPNTR2(wrpntr2_1), .WRPNTR1(wrpntr1_1), .WRPNTR0(wrpntr0_1), 
        .Q3(qd15), .Q2(qc15), .Q1(qb15), .Q0(qa15), .QWL(qwl15));

    IDDRX2DQA Inst_IDDRX2DQA_1_6 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_1), 
        .D(datain_t14), .RST(reset), .RDPNTR2(rdpntr2_1), .RDPNTR1(rdpntr1_1), 
        .RDPNTR0(rdpntr0_1), .WRPNTR2(wrpntr2_1), .WRPNTR1(wrpntr1_1), .WRPNTR0(wrpntr0_1), 
        .Q3(qd14), .Q2(qc14), .Q1(qb14), .Q0(qa14), .QWL(qwl14));

    IDDRX2DQA Inst_IDDRX2DQA_1_5 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_1), 
        .D(datain_t13), .RST(reset), .RDPNTR2(rdpntr2_1), .RDPNTR1(rdpntr1_1), 
        .RDPNTR0(rdpntr0_1), .WRPNTR2(wrpntr2_1), .WRPNTR1(wrpntr1_1), .WRPNTR0(wrpntr0_1), 
        .Q3(qd13), .Q2(qc13), .Q1(qb13), .Q0(qa13), .QWL(qwl13));

    IDDRX2DQA Inst_IDDRX2DQA_1_4 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_1), 
        .D(datain_t12), .RST(reset), .RDPNTR2(rdpntr2_1), .RDPNTR1(rdpntr1_1), 
        .RDPNTR0(rdpntr0_1), .WRPNTR2(wrpntr2_1), .WRPNTR1(wrpntr1_1), .WRPNTR0(wrpntr0_1), 
        .Q3(qd12), .Q2(qc12), .Q1(qb12), .Q0(qa12), .QWL(qwl12));

    IDDRX2DQA Inst_IDDRX2DQA_1_3 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_1), 
        .D(datain_t11), .RST(reset), .RDPNTR2(rdpntr2_1), .RDPNTR1(rdpntr1_1), 
        .RDPNTR0(rdpntr0_1), .WRPNTR2(wrpntr2_1), .WRPNTR1(wrpntr1_1), .WRPNTR0(wrpntr0_1), 
        .Q3(qd11), .Q2(qc11), .Q1(qb11), .Q0(qa11), .QWL(qwl11));

    IDDRX2DQA Inst_IDDRX2DQA_1_2 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_1), 
        .D(datain_t10), .RST(reset), .RDPNTR2(rdpntr2_1), .RDPNTR1(rdpntr1_1), 
        .RDPNTR0(rdpntr0_1), .WRPNTR2(wrpntr2_1), .WRPNTR1(wrpntr1_1), .WRPNTR0(wrpntr0_1), 
        .Q3(qd10), .Q2(qc10), .Q1(qb10), .Q0(qa10), .QWL(qwl10));

    IDDRX2DQA Inst_IDDRX2DQA_1_1 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_1), 
        .D(datain_t9), .RST(reset), .RDPNTR2(rdpntr2_1), .RDPNTR1(rdpntr1_1), 
        .RDPNTR0(rdpntr0_1), .WRPNTR2(wrpntr2_1), .WRPNTR1(wrpntr1_1), .WRPNTR0(wrpntr0_1), 
        .Q3(qd9), .Q2(qc9), .Q1(qb9), .Q0(qa9), .QWL(qwl9));

    IDDRX2DQA Inst_IDDRX2DQA_1_0 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_1), 
        .D(datain_t8), .RST(reset), .RDPNTR2(rdpntr2_1), .RDPNTR1(rdpntr1_1), 
        .RDPNTR0(rdpntr0_1), .WRPNTR2(wrpntr2_1), .WRPNTR1(wrpntr1_1), .WRPNTR0(wrpntr0_1), 
        .Q3(qd8), .Q2(qc8), .Q1(qb8), .Q0(qa8), .QWL(qwl8));

    IDDRX2DQA Inst_IDDRX2DQA_0_7 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_0), 
        .D(datain_t7), .RST(reset), .RDPNTR2(rdpntr2_0), .RDPNTR1(rdpntr1_0), 
        .RDPNTR0(rdpntr0_0), .WRPNTR2(wrpntr2_0), .WRPNTR1(wrpntr1_0), .WRPNTR0(wrpntr0_0), 
        .Q3(qd7), .Q2(qc7), .Q1(qb7), .Q0(qa7), .QWL(qwl7));

    IDDRX2DQA Inst_IDDRX2DQA_0_6 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_0), 
        .D(datain_t6), .RST(reset), .RDPNTR2(rdpntr2_0), .RDPNTR1(rdpntr1_0), 
        .RDPNTR0(rdpntr0_0), .WRPNTR2(wrpntr2_0), .WRPNTR1(wrpntr1_0), .WRPNTR0(wrpntr0_0), 
        .Q3(qd6), .Q2(qc6), .Q1(qb6), .Q0(qa6), .QWL(qwl6));

    IDDRX2DQA Inst_IDDRX2DQA_0_5 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_0), 
        .D(datain_t5), .RST(reset), .RDPNTR2(rdpntr2_0), .RDPNTR1(rdpntr1_0), 
        .RDPNTR0(rdpntr0_0), .WRPNTR2(wrpntr2_0), .WRPNTR1(wrpntr1_0), .WRPNTR0(wrpntr0_0), 
        .Q3(qd5), .Q2(qc5), .Q1(qb5), .Q0(qa5), .QWL(qwl5));

    IDDRX2DQA Inst_IDDRX2DQA_0_4 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_0), 
        .D(datain_t4), .RST(reset), .RDPNTR2(rdpntr2_0), .RDPNTR1(rdpntr1_0), 
        .RDPNTR0(rdpntr0_0), .WRPNTR2(wrpntr2_0), .WRPNTR1(wrpntr1_0), .WRPNTR0(wrpntr0_0), 
        .Q3(qd4), .Q2(qc4), .Q1(qb4), .Q0(qa4), .QWL(qwl4));

    IDDRX2DQA Inst_IDDRX2DQA_0_3 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_0), 
        .D(datain_t3), .RST(reset), .RDPNTR2(rdpntr2_0), .RDPNTR1(rdpntr1_0), 
        .RDPNTR0(rdpntr0_0), .WRPNTR2(wrpntr2_0), .WRPNTR1(wrpntr1_0), .WRPNTR0(wrpntr0_0), 
        .Q3(qd3), .Q2(qc3), .Q1(qb3), .Q0(qa3), .QWL(qwl3));

    IDDRX2DQA Inst_IDDRX2DQA_0_2 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_0), 
        .D(datain_t2), .RST(reset), .RDPNTR2(rdpntr2_0), .RDPNTR1(rdpntr1_0), 
        .RDPNTR0(rdpntr0_0), .WRPNTR2(wrpntr2_0), .WRPNTR1(wrpntr1_0), .WRPNTR0(wrpntr0_0), 
        .Q3(qd2), .Q2(qc2), .Q1(qb2), .Q0(qa2), .QWL(qwl2));

    IDDRX2DQA Inst_IDDRX2DQA_0_1 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_0), 
        .D(datain_t1), .RST(reset), .RDPNTR2(rdpntr2_0), .RDPNTR1(rdpntr1_0), 
        .RDPNTR0(rdpntr0_0), .WRPNTR2(wrpntr2_0), .WRPNTR1(wrpntr1_0), .WRPNTR0(wrpntr0_0), 
        .Q3(qd1), .Q2(qc1), .Q1(qb1), .Q0(qa1), .QWL(qwl1));

    IDDRX2DQA Inst_IDDRX2DQA_0_0 (.SCLK(sclk_t), .ECLK(eclko), .DQSR90(dqsr90_0), 
        .D(datain_t0), .RST(reset), .RDPNTR2(rdpntr2_0), .RDPNTR1(rdpntr1_0), 
        .RDPNTR0(rdpntr0_0), .WRPNTR2(wrpntr2_0), .WRPNTR1(wrpntr1_0), .WRPNTR0(wrpntr0_0), 
        .Q3(qd0), .Q2(qc0), .Q1(qb0), .Q0(qa0), .QWL(qwl0));

    defparam Inst7_DELAYG15.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG15.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG15 (.A(dqin_t15), .Z(datain_t15));

    defparam Inst7_DELAYG14.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG14.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG14 (.A(dqin_t14), .Z(datain_t14));

    defparam Inst7_DELAYG13.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG13.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG13 (.A(dqin_t13), .Z(datain_t13));

    defparam Inst7_DELAYG12.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG12.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG12 (.A(dqin_t12), .Z(datain_t12));

    defparam Inst7_DELAYG11.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG11.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG11 (.A(dqin_t11), .Z(datain_t11));

    defparam Inst7_DELAYG10.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG10.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG10 (.A(dqin_t10), .Z(datain_t10));

    defparam Inst7_DELAYG9.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG9.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG9 (.A(dqin_t9), .Z(datain_t9));

    defparam Inst7_DELAYG8.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG8.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG8 (.A(dqin_t8), .Z(datain_t8));

    defparam Inst7_DELAYG7.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG7.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG7 (.A(dqin_t7), .Z(datain_t7));

    defparam Inst7_DELAYG6.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG6.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG6 (.A(dqin_t6), .Z(datain_t6));

    defparam Inst7_DELAYG5.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG5.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG5 (.A(dqin_t5), .Z(datain_t5));

    defparam Inst7_DELAYG4.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG4.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG4 (.A(dqin_t4), .Z(datain_t4));

    defparam Inst7_DELAYG3.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG3.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG3 (.A(dqin_t3), .Z(datain_t3));

    defparam Inst7_DELAYG2.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG2.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG2 (.A(dqin_t2), .Z(datain_t2));

    defparam Inst7_DELAYG1.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG1.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG1 (.A(dqin_t1), .Z(datain_t1));

    defparam Inst7_DELAYG0.DEL_VALUE = 0 ;
    defparam Inst7_DELAYG0.DEL_MODE = "DQS_ALIGNED_X2" ;
    DELAYG Inst7_DELAYG0 (.A(dqin_t0), .Z(datain_t0));

    defparam Inst_DDRDLLA.FORCE_MAX_DELAY = "NO" ;
    DDRDLLA Inst_DDRDLLA (.CLK(eclko), .RST(dll_reset), .UDDCNTLN(uddcntln), 
        .FREEZE(freeze), .DDRDEL(ddrdel), .LOCK(lock), .DCNTL7(dcntl[7]), 
        .DCNTL6(dcntl[6]), .DCNTL5(dcntl[5]), .DCNTL4(dcntl[4]), .DCNTL3(dcntl[3]), 
        .DCNTL2(dcntl[2]), .DCNTL1(dcntl[1]), .DCNTL0(dcntl[0]));

    VLO scuba_vlo_inst (.Z(scuba_vlo));

    defparam Inst6_CLKDIVF.DIV = "2.0" ;
    CLKDIVF Inst6_CLKDIVF (.CLKI(eclko), .RST(reset), .ALIGNWD(scuba_vlo), 
        .CDIVX(sclk_t));

    ECLKSYNCB Inst5_ECLKSYNCB (.ECLKI(clkop), .STOP(stop), .ECLKO(eclko));

    BB Inst4_BB7 (.I(buf_dq_1o7), .T(buf_dq_1t7), .O(buf_dq_1i7), .B(dq_1[7]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst4_BB6 (.I(buf_dq_1o6), .T(buf_dq_1t6), .O(buf_dq_1i6), .B(dq_1[6]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst4_BB5 (.I(buf_dq_1o5), .T(buf_dq_1t5), .O(buf_dq_1i5), .B(dq_1[5]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst4_BB4 (.I(buf_dq_1o4), .T(buf_dq_1t4), .O(buf_dq_1i4), .B(dq_1[4]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst4_BB3 (.I(buf_dq_1o3), .T(buf_dq_1t3), .O(buf_dq_1i3), .B(dq_1[3]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst4_BB2 (.I(buf_dq_1o2), .T(buf_dq_1t2), .O(buf_dq_1i2), .B(dq_1[2]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst4_BB1 (.I(buf_dq_1o1), .T(buf_dq_1t1), .O(buf_dq_1i1), .B(dq_1[1]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst4_BB0 (.I(buf_dq_1o0), .T(buf_dq_1t0), .O(buf_dq_1i0), .B(dq_1[0]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst3_BB (.I(buf_dqs_1o), .T(buf_dqs_1t), .O(buf_dqs_1i), .B(dqs_1))
             /* synthesis IO_TYPE="SSTL135D_I" */;

    BB Inst2_BB7 (.I(buf_dq_0o7), .T(buf_dq_0t7), .O(buf_dq_0i7), .B(dq_0[7]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst2_BB6 (.I(buf_dq_0o6), .T(buf_dq_0t6), .O(buf_dq_0i6), .B(dq_0[6]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst2_BB5 (.I(buf_dq_0o5), .T(buf_dq_0t5), .O(buf_dq_0i5), .B(dq_0[5]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst2_BB4 (.I(buf_dq_0o4), .T(buf_dq_0t4), .O(buf_dq_0i4), .B(dq_0[4]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst2_BB3 (.I(buf_dq_0o3), .T(buf_dq_0t3), .O(buf_dq_0i3), .B(dq_0[3]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst2_BB2 (.I(buf_dq_0o2), .T(buf_dq_0t2), .O(buf_dq_0i2), .B(dq_0[2]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst2_BB1 (.I(buf_dq_0o1), .T(buf_dq_0t1), .O(buf_dq_0i1), .B(dq_0[1]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst2_BB0 (.I(buf_dq_0o0), .T(buf_dq_0t0), .O(buf_dq_0i0), .B(dq_0[0]))
             /* synthesis IO_TYPE="SSTL135_I" */;

    BB Inst1_BB (.I(buf_dqs_0o), .T(buf_dqs_0t), .O(buf_dqs_0i), .B(dqs_0))
             /* synthesis IO_TYPE="SSTL135D_I" */;

    assign dll_lock = lock;
    assign wrdirection_1 = scuba_vlo;
    assign wrdirection_0 = scuba_vlo;
    assign wrmove_1 = scuba_vlo;
    assign wrmove_0 = scuba_vlo;
    assign wrloadn_1 = scuba_vlo;
    assign wrloadn_0 = scuba_vlo;
    assign rddirection_1 = scuba_vlo;
    assign rddirection_0 = scuba_vlo;
    assign rdmove_1 = scuba_vlo;
    assign rdmove_0 = scuba_vlo;
    assign rdloadn_1 = scuba_vlo;
    assign rdloadn_0 = scuba_vlo;
    assign qwl_1[7] = qwl15;
    assign qwl_1[6] = qwl14;
    assign qwl_1[5] = qwl13;
    assign qwl_1[4] = qwl12;
    assign qwl_1[3] = qwl11;
    assign qwl_1[2] = qwl10;
    assign qwl_1[1] = qwl9;
    assign qwl_1[0] = qwl8;
    assign dqso1_1 = dqso_1[1];
    assign dqso0_1 = dqso_1[0];
    assign dqstri1_1 = dqstri_1[1];
    assign dqstri0_1 = dqstri_1[0];
    assign datatri1_1 = datatri_1[1];
    assign datatri0_1 = datatri_1[0];
    assign read1_1 = read_1[1];
    assign read0_1 = read_1[0];
    assign dyndelay7_1 = dyndelay_1[7];
    assign dyndelay6_1 = dyndelay_1[6];
    assign dyndelay5_1 = dyndelay_1[5];
    assign dyndelay4_1 = dyndelay_1[4];
    assign dyndelay3_1 = dyndelay_1[3];
    assign dyndelay2_1 = dyndelay_1[2];
    assign dyndelay1_1 = dyndelay_1[1];
    assign dyndelay0_1 = dyndelay_1[0];
    assign readclksel2_1 = readclksel_1[2];
    assign readclksel1_1 = readclksel_1[1];
    assign readclksel0_1 = readclksel_1[0];
    assign dd15 = dataout_1i[31];
    assign dd14 = dataout_1i[30];
    assign dd13 = dataout_1i[29];
    assign dd12 = dataout_1i[28];
    assign dd11 = dataout_1i[27];
    assign dd10 = dataout_1i[26];
    assign dd9 = dataout_1i[25];
    assign dd8 = dataout_1i[24];
    assign dc15 = dataout_1i[23];
    assign dc14 = dataout_1i[22];
    assign dc13 = dataout_1i[21];
    assign dc12 = dataout_1i[20];
    assign dc11 = dataout_1i[19];
    assign dc10 = dataout_1i[18];
    assign dc9 = dataout_1i[17];
    assign dc8 = dataout_1i[16];
    assign datain_1o[31] = qd15;
    assign datain_1o[30] = qd14;
    assign datain_1o[29] = qd13;
    assign datain_1o[28] = qd12;
    assign datain_1o[27] = qd11;
    assign datain_1o[26] = qd10;
    assign datain_1o[25] = qd9;
    assign datain_1o[24] = qd8;
    assign datain_1o[23] = qc15;
    assign datain_1o[22] = qc14;
    assign datain_1o[21] = qc13;
    assign datain_1o[20] = qc12;
    assign datain_1o[19] = qc11;
    assign datain_1o[18] = qc10;
    assign datain_1o[17] = qc9;
    assign datain_1o[16] = qc8;
    assign db15 = dataout_1i[15];
    assign db14 = dataout_1i[14];
    assign db13 = dataout_1i[13];
    assign db12 = dataout_1i[12];
    assign db11 = dataout_1i[11];
    assign db10 = dataout_1i[10];
    assign db9 = dataout_1i[9];
    assign db8 = dataout_1i[8];
    assign da15 = dataout_1i[7];
    assign da14 = dataout_1i[6];
    assign da13 = dataout_1i[5];
    assign da12 = dataout_1i[4];
    assign da11 = dataout_1i[3];
    assign da10 = dataout_1i[2];
    assign da9 = dataout_1i[1];
    assign da8 = dataout_1i[0];
    assign datain_1o[15] = qb15;
    assign datain_1o[14] = qb14;
    assign datain_1o[13] = qb13;
    assign datain_1o[12] = qb12;
    assign datain_1o[11] = qb11;
    assign datain_1o[10] = qb10;
    assign datain_1o[9] = qb9;
    assign datain_1o[8] = qb8;
    assign datain_1o[7] = qa15;
    assign datain_1o[6] = qa14;
    assign datain_1o[5] = qa13;
    assign datain_1o[4] = qa12;
    assign datain_1o[3] = qa11;
    assign datain_1o[2] = qa10;
    assign datain_1o[1] = qa9;
    assign datain_1o[0] = qa8;
    assign buf_dq_1t7 = dqtri1;
    assign buf_dq_1t6 = dqtri1;
    assign buf_dq_1t5 = dqtri1;
    assign buf_dq_1t4 = dqtri1;
    assign buf_dq_1t3 = dqtri1;
    assign buf_dq_1t2 = dqtri1;
    assign buf_dq_1t1 = dqtri1;
    assign buf_dq_1t0 = dqtri1;
    assign buf_dq_1o7 = dqo15;
    assign buf_dq_1o6 = dqo14;
    assign buf_dq_1o5 = dqo13;
    assign buf_dq_1o4 = dqo12;
    assign buf_dq_1o3 = dqo11;
    assign buf_dq_1o2 = dqo10;
    assign buf_dq_1o1 = dqo9;
    assign buf_dq_1o0 = dqo8;
    assign dqin_t15 = buf_dq_1i7;
    assign dqin_t14 = buf_dq_1i6;
    assign dqin_t13 = buf_dq_1i5;
    assign dqin_t12 = buf_dq_1i4;
    assign dqin_t11 = buf_dq_1i3;
    assign dqin_t10 = buf_dq_1i2;
    assign dqin_t9 = buf_dq_1i1;
    assign dqin_t8 = buf_dq_1i0;
    assign dqsin1 = buf_dqs_1i;
    assign buf_dqs_1o = dqsout1;
    assign buf_dqs_1t = dqstrio1;
    assign qwl_0[7] = qwl7;
    assign qwl_0[6] = qwl6;
    assign qwl_0[5] = qwl5;
    assign qwl_0[4] = qwl4;
    assign qwl_0[3] = qwl3;
    assign qwl_0[2] = qwl2;
    assign qwl_0[1] = qwl1;
    assign qwl_0[0] = qwl0;
    assign dqso1_0 = dqso_0[1];
    assign dqso0_0 = dqso_0[0];
    assign dqstri1_0 = dqstri_0[1];
    assign dqstri0_0 = dqstri_0[0];
    assign datatri1_0 = datatri_0[1];
    assign datatri0_0 = datatri_0[0];
    assign read1_0 = read_0[1];
    assign read0_0 = read_0[0];
    assign dyndelay7_0 = dyndelay_0[7];
    assign dyndelay6_0 = dyndelay_0[6];
    assign dyndelay5_0 = dyndelay_0[5];
    assign dyndelay4_0 = dyndelay_0[4];
    assign dyndelay3_0 = dyndelay_0[3];
    assign dyndelay2_0 = dyndelay_0[2];
    assign dyndelay1_0 = dyndelay_0[1];
    assign dyndelay0_0 = dyndelay_0[0];
    assign readclksel2_0 = readclksel_0[2];
    assign readclksel1_0 = readclksel_0[1];
    assign readclksel0_0 = readclksel_0[0];
    assign dd7 = dataout_0i[31];
    assign dd6 = dataout_0i[30];
    assign dd5 = dataout_0i[29];
    assign dd4 = dataout_0i[28];
    assign dd3 = dataout_0i[27];
    assign dd2 = dataout_0i[26];
    assign dd1 = dataout_0i[25];
    assign dd0 = dataout_0i[24];
    assign dc7 = dataout_0i[23];
    assign dc6 = dataout_0i[22];
    assign dc5 = dataout_0i[21];
    assign dc4 = dataout_0i[20];
    assign dc3 = dataout_0i[19];
    assign dc2 = dataout_0i[18];
    assign dc1 = dataout_0i[17];
    assign dc0 = dataout_0i[16];
    assign datain_0o[31] = qd7;
    assign datain_0o[30] = qd6;
    assign datain_0o[29] = qd5;
    assign datain_0o[28] = qd4;
    assign datain_0o[27] = qd3;
    assign datain_0o[26] = qd2;
    assign datain_0o[25] = qd1;
    assign datain_0o[24] = qd0;
    assign datain_0o[23] = qc7;
    assign datain_0o[22] = qc6;
    assign datain_0o[21] = qc5;
    assign datain_0o[20] = qc4;
    assign datain_0o[19] = qc3;
    assign datain_0o[18] = qc2;
    assign datain_0o[17] = qc1;
    assign datain_0o[16] = qc0;
    assign db7 = dataout_0i[15];
    assign db6 = dataout_0i[14];
    assign db5 = dataout_0i[13];
    assign db4 = dataout_0i[12];
    assign db3 = dataout_0i[11];
    assign db2 = dataout_0i[10];
    assign db1 = dataout_0i[9];
    assign db0 = dataout_0i[8];
    assign da7 = dataout_0i[7];
    assign da6 = dataout_0i[6];
    assign da5 = dataout_0i[5];
    assign da4 = dataout_0i[4];
    assign da3 = dataout_0i[3];
    assign da2 = dataout_0i[2];
    assign da1 = dataout_0i[1];
    assign da0 = dataout_0i[0];
    assign datain_0o[15] = qb7;
    assign datain_0o[14] = qb6;
    assign datain_0o[13] = qb5;
    assign datain_0o[12] = qb4;
    assign datain_0o[11] = qb3;
    assign datain_0o[10] = qb2;
    assign datain_0o[9] = qb1;
    assign datain_0o[8] = qb0;
    assign datain_0o[7] = qa7;
    assign datain_0o[6] = qa6;
    assign datain_0o[5] = qa5;
    assign datain_0o[4] = qa4;
    assign datain_0o[3] = qa3;
    assign datain_0o[2] = qa2;
    assign datain_0o[1] = qa1;
    assign datain_0o[0] = qa0;
    assign buf_dq_0t7 = dqtri0;
    assign buf_dq_0t6 = dqtri0;
    assign buf_dq_0t5 = dqtri0;
    assign buf_dq_0t4 = dqtri0;
    assign buf_dq_0t3 = dqtri0;
    assign buf_dq_0t2 = dqtri0;
    assign buf_dq_0t1 = dqtri0;
    assign buf_dq_0t0 = dqtri0;
    assign buf_dq_0o7 = dqo7;
    assign buf_dq_0o6 = dqo6;
    assign buf_dq_0o5 = dqo5;
    assign buf_dq_0o4 = dqo4;
    assign buf_dq_0o3 = dqo3;
    assign buf_dq_0o2 = dqo2;
    assign buf_dq_0o1 = dqo1;
    assign buf_dq_0o0 = dqo0;
    assign dqin_t7 = buf_dq_0i7;
    assign dqin_t6 = buf_dq_0i6;
    assign dqin_t5 = buf_dq_0i5;
    assign dqin_t4 = buf_dq_0i4;
    assign dqin_t3 = buf_dq_0i3;
    assign dqin_t2 = buf_dq_0i2;
    assign dqin_t1 = buf_dq_0i1;
    assign dqin_t0 = buf_dq_0i0;
    assign dqsin0 = buf_dqs_0i;
    assign buf_dqs_0o = dqsout0;
    assign buf_dqs_0t = dqstrio0;
    assign sclk = sclk_t;
    assign lock_chk = pll_lock;


    // exemplar begin
    // exemplar attribute Inst31_OB0 IO_TYPE SSTL135_I
    // exemplar attribute Inst29_OB0 IO_TYPE SSTL135_I
    // exemplar attribute Inst27_OB0 IO_TYPE SSTL135_I
    // exemplar attribute Inst24_OB IO_TYPE SSTL135_I
    // exemplar attribute Inst22_OB IO_TYPE SSTL135_I
    // exemplar attribute Inst20_OB IO_TYPE SSTL135_I
    // exemplar attribute Inst18_OB2 IO_TYPE SSTL135_I
    // exemplar attribute Inst18_OB1 IO_TYPE SSTL135_I
    // exemplar attribute Inst18_OB0 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB13 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB12 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB11 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB10 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB9 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB8 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB7 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB6 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB5 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB4 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB3 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB2 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB1 IO_TYPE SSTL135_I
    // exemplar attribute Inst16_OB0 IO_TYPE SSTL135_I
    // exemplar attribute Inst14_OB0 IO_TYPE SSTL135D_I
    // exemplar attribute Inst4_BB7 IO_TYPE SSTL135_I
    // exemplar attribute Inst4_BB6 IO_TYPE SSTL135_I
    // exemplar attribute Inst4_BB5 IO_TYPE SSTL135_I
    // exemplar attribute Inst4_BB4 IO_TYPE SSTL135_I
    // exemplar attribute Inst4_BB3 IO_TYPE SSTL135_I
    // exemplar attribute Inst4_BB2 IO_TYPE SSTL135_I
    // exemplar attribute Inst4_BB1 IO_TYPE SSTL135_I
    // exemplar attribute Inst4_BB0 IO_TYPE SSTL135_I
    // exemplar attribute Inst3_BB IO_TYPE SSTL135D_I
    // exemplar attribute Inst2_BB7 IO_TYPE SSTL135_I
    // exemplar attribute Inst2_BB6 IO_TYPE SSTL135_I
    // exemplar attribute Inst2_BB5 IO_TYPE SSTL135_I
    // exemplar attribute Inst2_BB4 IO_TYPE SSTL135_I
    // exemplar attribute Inst2_BB3 IO_TYPE SSTL135_I
    // exemplar attribute Inst2_BB2 IO_TYPE SSTL135_I
    // exemplar attribute Inst2_BB1 IO_TYPE SSTL135_I
    // exemplar attribute Inst2_BB0 IO_TYPE SSTL135_I
    // exemplar attribute Inst1_BB IO_TYPE SSTL135D_I
    // exemplar end

endmodule
